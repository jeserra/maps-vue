!function () { L.Control.FullScreen = L.Control.extend({ options: { position: "bottomright", title: "Mapa Completo", titleCancel: "Salir Mapa Completo", forceSeparateButton: !0, forcePseudoFullscreen: !1 }, onAdd: function (e) { var t, n = "leaflet-control-zoom-fullscreen", l = ""; return t = e.zoomControl && !this.options.forceSeparateButton ? e.zoomControl._container : L.DomUtil.create("div", "leaflet-bar"), this.options.content ? l = this.options.content : n += " fullscreen-icon", this._createButton(this.options.title, n, l, t, this.toggleFullScreen, this), this._map.on("enterFullscreen exitFullscreen", this._toggleTitle, this), t }, _createButton: function (t, n, l, r, i, o) { return this.link = L.DomUtil.create("a", n, r), this.link.href = "#", this.link.title = t, this.link.innerHTML = l, L.DomEvent.addListener(this.link, "click", L.DomEvent.stopPropagation).addListener(this.link, "click", L.DomEvent.preventDefault).addListener(this.link, "click", i, o), L.DomEvent.addListener(r, e.fullScreenEventName, L.DomEvent.stopPropagation).addListener(r, e.fullScreenEventName, L.DomEvent.preventDefault).addListener(r, e.fullScreenEventName, this._handleEscKey, o), L.DomEvent.addListener(document, e.fullScreenEventName, L.DomEvent.stopPropagation).addListener(document, e.fullScreenEventName, L.DomEvent.preventDefault).addListener(document, e.fullScreenEventName, this._handleEscKey, o), this.link }, toggleFullScreen: function () { var t = this._map; t._exitFired = !1, t._isFullscreen ? (e.supportsFullScreen && !this.options.forcePseudoFullscreen ? e.cancelFullScreen(t._container) : L.DomUtil.removeClass(t._container, "leaflet-pseudo-fullscreen"), t.invalidateSize(), t.fire("exitFullscreen"), t._exitFired = !0, t._isFullscreen = !1) : (e.supportsFullScreen && !this.options.forcePseudoFullscreen ? e.requestFullScreen(t._container) : L.DomUtil.addClass(t._container, "leaflet-pseudo-fullscreen"), t.invalidateSize(), t.fire("enterFullscreen"), t._isFullscreen = !0) }, _toggleTitle: function () { this.link.title = this._map._isFullscreen ? this.options.title : this.options.titleCancel }, _handleEscKey: function () { var t = this._map; e.isFullScreen(t) || t._exitFired || (t.fire("exitFullscreen"), t._exitFired = !0, t._isFullscreen = !1) } }), L.Map.addInitHook(function () { this.options.fullscreenControl && (this.fullscreenControl = L.control.fullscreen(this.options.fullscreenControlOptions), this.addControl(this.fullscreenControl)) }), L.control.fullscreen = function (e) { return new L.Control.FullScreen(e) }; var e = { supportsFullScreen: !1, isFullScreen: function () { return !1 }, requestFullScreen: function () { }, cancelFullScreen: function () { }, fullScreenEventName: "", prefix: "" }, t = "webkit moz o ms khtml".split(" "); if ("undefined" != typeof document.exitFullscreen) e.supportsFullScreen = !0; else for (var n = 0, l = t.length; l > n; n++) if (e.prefix = t[n], "undefined" != typeof document[e.prefix + "CancelFullScreen"]) { e.supportsFullScreen = !0; break } e.supportsFullScreen && (e.fullScreenEventName = e.prefix + "fullscreenchange", e.isFullScreen = function () { switch (this.prefix) { case "": return document.fullScreen; case "webkit": return document.webkitIsFullScreen; default: return document[this.prefix + "FullScreen"] } }, e.requestFullScreen = function (e) { return "" === this.prefix ? e.requestFullscreen() : e[this.prefix + "RequestFullScreen"]() }, e.cancelFullScreen = function (e) { return "" === this.prefix ? document.exitFullscreen() : document[this.prefix + "CancelFullScreen"]() }), "undefined" != typeof jQuery && (jQuery.fn.requestFullScreen = function () { return this.each(function () { var t = jQuery(this); e.supportsFullScreen && e.requestFullScreen(t) }) }), window.fullScreenApi = e }();